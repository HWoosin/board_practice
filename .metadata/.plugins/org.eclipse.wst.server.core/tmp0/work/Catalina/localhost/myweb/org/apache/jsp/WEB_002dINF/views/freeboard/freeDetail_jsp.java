/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-08-14 15:48:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.freeboard;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class freeDetail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/C:/woosin/board_practice/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/boardPractice/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1690868478505L));
    _jspx_dependants.put("jar:file:/C:/woosin/board_practice/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/boardPractice/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ffmt_005fparseDate_0026_005fvar_005fvalue_005ftype_005fpattern_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ffmt_005fformatDate_0026_005fvalue_005fpattern_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005ffmt_005fparseDate_0026_005fvar_005fvalue_005ftype_005fpattern_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005ffmt_005fformatDate_0026_005fvalue_005fpattern_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005ffmt_005fparseDate_0026_005fvar_005fvalue_005ftype_005fpattern_005fnobody.release();
    _005fjspx_005ftagPool_005ffmt_005fformatDate_0026_005fvalue_005fpattern_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write(" \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!--개인 디자인 추가-->\r\n");
      out.write("<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/bootstrap.css\" rel=\"stylesheet\">\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js\"></script>\r\n");
      out.write("<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/style.css\" rel=\"stylesheet\">\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/js/bootstrap.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<section>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <div class=\"row\">\r\n");
      out.write("            <div class=\"col-xs-12 col-md-9 write-wrap\">\r\n");
      out.write("                <div class=\"titlebox\">\r\n");
      out.write("                    <p>상세보기</p>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <form action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/freeboard/modify\" method=\"post\"  name=\"detailForm\">\r\n");
      out.write("                    <div>\r\n");
      out.write("                        <label>작성일</label>\r\n");
      out.write("                            <p>\r\n");
      out.write("                               ");
      if (_jspx_meth_fmt_005fparseDate_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("                               ");
      if (_jspx_meth_fmt_005fformatDate_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("                            </p>\r\n");
      out.write("\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"form-group\">\r\n");
      out.write("                        <input class=\"form-control\" id=\"bno\" name=\"bno\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${article.bno}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" type=\"hidden\">\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"form-group\">\r\n");
      out.write("                        <label>작성자</label>\r\n");
      out.write("                        <!-- <input class=\"form-control ellipsis\" name=\"writer\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${article.writer}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" readonly> -->\r\n");
      out.write("                        <textarea class=\"form-control ellipsis\" id=\"writer\" rows=\"1\" name=\"writer\" readonly>");
      if (_jspx_meth_c_005fout_005f0(_jspx_page_context))
        return;
      out.write("</textarea>\r\n");
      out.write("\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"form-group\">\r\n");
      out.write("                        <label>제목</label>\r\n");
      out.write("                        <!-- <input class=\"form-control ellipsis\" id=\"title\" name=\"title\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${article.title}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" readonly onclick=\"showTextArea()\"> -->\r\n");
      out.write("                        <textarea class=\"form-control ellipsis\" id=\"title\" rows=\"1\" name=\"title\" readonly  onclick=\"showTextArea()\">");
      if (_jspx_meth_c_005fout_005f1(_jspx_page_context))
        return;
      out.write("</textarea>\r\n");
      out.write("                    </div>\r\n");
      out.write("\r\n");
      out.write("                    <div class=\"form-group\">\r\n");
      out.write("                        <label>내용</label>\r\n");
      out.write("                        <textarea class=\"form-control\" id=\"content\" rows=\"10\" name=\"content\" readonly>");
      if (_jspx_meth_c_005fout_005f2(_jspx_page_context))
        return;
      out.write("</textarea>\r\n");
      out.write("                    </div>\r\n");
      out.write("\r\n");
      out.write("                    \r\n");
      out.write("                </form>\r\n");
      out.write("                <button class=\"btn btn-primary\" id=\"updateBtn\">변경</button>\r\n");
      out.write("                <button type=\"button\" class=\"btn btn-primary\" id=\"replyBtn\"\r\n");
      out.write("                        onclick=\"location.href='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/freeboard/replyBoard'\">답글작성</button>\r\n");
      out.write("                <button type=\"button\" class=\"btn btn-dark\"\r\n");
      out.write("                        onclick=\"location.href='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/freeboard/freeList?pageNum=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${p.pageNum}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("&cpp=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${p.cpp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("&keyword=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${p.keyword}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("&condition=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${p.condition}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'\">목록</button>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</section>\r\n");
      out.write("\r\n");
      out.write("<!-- 댓글 영역 시작부분 -->\r\n");
      out.write("<section style=\"margin-top: 80px;\">\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <div class=\"row\">\r\n");
      out.write("            <div class=\"col-xs-12 col-md-9 write-wrap\">\r\n");
      out.write("                <form class=\"reply-wrap\">\r\n");
      out.write("                    <!-- <div class=\"reply-image\">\r\n");
      out.write("                        <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/img/profile.png\">\r\n");
      out.write("                    </div> -->\r\n");
      out.write("                    <!--form-control은 부트스트랩의 클래스입니다-->\r\n");
      out.write("                    <div class=\"reply-content\">\r\n");
      out.write("                        <textarea class=\"form-control\" rows=\"3\" id=\"reply\"></textarea>\r\n");
      out.write("                        <div class=\"reply-group\">\r\n");
      out.write("                            <div class=\"reply-input\">\r\n");
      out.write("                                <input type=\"text\" class=\"form-control\" id=\"replyId\" placeholder=\"이름\">\r\n");
      out.write("                                <input type=\"password\" class=\"form-control\" id=\"replyPw\" placeholder=\"비밀번호\">\r\n");
      out.write("                            </div>\r\n");
      out.write("\r\n");
      out.write("                            <button type=\"button\" id=\"replyRegist\" class=\"right btn btn-info\">등록하기</button>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                    </div>\r\n");
      out.write("                </form>\r\n");
      out.write("\r\n");
      out.write("                <!--여기에 접근 반복-->\r\n");
      out.write("                <div id=\"replyList\">\r\n");
      out.write("\r\n");
      out.write("                    <!-- 자바스크립트 단에서 반복문을 이용해서 댓글의 개수만큼 반복 표현. -->\r\n");
      out.write("\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</section>\r\n");
      out.write("\r\n");
      out.write("<!-- 모달 -->\r\n");
      out.write("<div class=\"modal fade\" id=\"replyModal\" role=\"dialog\">\r\n");
      out.write("    <div class=\"modal-dialog modal-md\">\r\n");
      out.write("        <div class=\"modal-content\">\r\n");
      out.write("            <div class=\"modal-header\">\r\n");
      out.write("                <button type=\"button\" class=\"btn btn-default pull-right\" data-dismiss=\"modal\">닫기</button>\r\n");
      out.write("                <h4 class=\"modal-title\">댓글 수정</h4>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"modal-body\">\r\n");
      out.write("                <!-- 수정폼 id값을 확인하세요-->\r\n");
      out.write("                <div class=\"reply-content\">\r\n");
      out.write("                    <textarea class=\"form-control\" rows=\"4\" id=\"modalReply\" placeholder=\"내용입력\"></textarea>\r\n");
      out.write("                    <div class=\"reply-group\">\r\n");
      out.write("                        <div class=\"reply-input\">\r\n");
      out.write("                            <input type=\"hidden\" id=\"modalRno\">\r\n");
      out.write("                            <input type=\"password\" class=\"form-control\" placeholder=\"비밀번호\" id=\"modalPw\">\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <button class=\"right btn btn-info\" id=\"modalModBtn\">수정하기</button>\r\n");
      out.write("                        <button class=\"right btn btn-info\" id=\"modalDelBtn\">삭제하기</button>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("                <!-- 수정폼끝 -->\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    //입력에 따라 textarea 변함\r\n");
      out.write("    const contentTextarea = document.getElementById('content');\r\n");
      out.write("        function adjustTextareaHeight() {\r\n");
      out.write("            contentTextarea.style.height = 'auto';\r\n");
      out.write("            contentTextarea.style.height = contentTextarea.scrollHeight + 'px';\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        contentTextarea.addEventListener('input', adjustTextareaHeight);\r\n");
      out.write("        window.addEventListener('load', adjustTextareaHeight);\r\n");
      out.write("\r\n");
      out.write("        const titleInput = document.getElementById('title');\r\n");
      out.write("        titleInput.onclick = function(){\r\n");
      out.write("            alert(titleInput.value);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("    const $form = document.detailForm;\r\n");
      out.write("	let bno = document.getElementById('bno').value;\r\n");
      out.write("	document.getElementById('updateBtn').onclick = function() {\r\n");
      out.write("    enterPassword();\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("function enterPassword() {\r\n");
      out.write("    let pw = prompt('비밀번호를 입력하세요');\r\n");
      out.write("\r\n");
      out.write("    if (pw === null) {\r\n");
      out.write("        return;\r\n");
      out.write("    } else {\r\n");
      out.write("        const data = {\r\n");
      out.write("            bno: bno,\r\n");
      out.write("            pw: pw\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        fetch('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/freeboard/check', {\r\n");
      out.write("            method: 'post',\r\n");
      out.write("            headers: {\r\n");
      out.write("                'Content-type': 'application/JSON'\r\n");
      out.write("            },\r\n");
      out.write("            body: JSON.stringify(data)\r\n");
      out.write("        })\r\n");
      out.write("        .then(res => res.text()) // 요청 완료 후 응답 정보에서 텍스트만 빼기\r\n");
      out.write("        .then(data => { // 텍스트만 뺀 Promise 객체로부터 data전달받음.\r\n");
      out.write("            if (data === '1') {\r\n");
      out.write("                console.log(data);\r\n");
      out.write("                $form.submit();\r\n");
      out.write("            } else {\r\n");
      out.write("                alert('비밀번호가 틀렸습니다. 다시 입력해주세요.');\r\n");
      out.write("                console.log(data);\r\n");
      out.write("                enterPassword(); // Prompt again for the password\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//댓글등록\r\n");
      out.write("window.onload = function () {\r\n");
      out.write("\r\n");
      out.write("    document.getElementById('replyRegist').onclick = () => {\r\n");
      out.write("\r\n");
      out.write("        console.log('댓글 등록 이벤트 발생!');\r\n");
      out.write("\r\n");
      out.write("        const bno = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${article.bno}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'; //현재 게시글 번호\r\n");
      out.write("        const reply = document.getElementById('reply').value;\r\n");
      out.write("        const replyId = document.getElementById('replyId').value;\r\n");
      out.write("        const replyPw = document.getElementById('replyPw').value;\r\n");
      out.write("\r\n");
      out.write("        if (reply === '' || replyId === '' || replyPw === '') {\r\n");
      out.write("            alert('이름, 비밀번호, 내용을 입력하세요!');\r\n");
      out.write("            return;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        //요청에 관련된 정보 객체\r\n");
      out.write("        const reqObj = {\r\n");
      out.write("            method: 'post',\r\n");
      out.write("            headers: {\r\n");
      out.write("                'Content-Type': 'application/json'\r\n");
      out.write("            },\r\n");
      out.write("            body: JSON.stringify({\r\n");
      out.write("                'bno': bno,\r\n");
      out.write("                'reply': reply,\r\n");
      out.write("                'replyId': replyId,\r\n");
      out.write("                'replyPw': replyPw\r\n");
      out.write("            })\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        fetch('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/reply/regist', reqObj)\r\n");
      out.write("            .then(res => res.text())\r\n");
      out.write("            .then(data => {\r\n");
      out.write("                console.log('통신 성공!: ' + data);\r\n");
      out.write("                document.getElementById('reply').value = '';\r\n");
      out.write("                document.getElementById('replyId').value = '';\r\n");
      out.write("                document.getElementById('replyPw').value = '';\r\n");
      out.write("                //등록 완료 후 댓글 목록 함수를 호출해서 비동기식으로 목록 표현.\r\n");
      out.write("                getList(true);\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("    } //댓글 등록 이벤트 끝.\r\n");
      out.write("\r\n");
      out.write("    //댓글리스트 불러오기\r\n");
      out.write("    let strAdd = ''; //화면에 그려넣을 태그를 문자열의 형태로 추가할 변수\r\n");
      out.write("        const $replyList = document.getElementById('replyList');\r\n");
      out.write("\r\n");
      out.write("        //게시글 상세보기 화면에 처음 진입했을 시 댓글 리스트를 한 번 불러오자.\r\n");
      out.write("        getList(true);\r\n");
      out.write("\r\n");
      out.write("        //댓글 목록을 가져올 함수.\r\n");
      out.write("        //getList의 매개값으로 뭘 줄거냐?\r\n");
      out.write("        //요청된 페이지 번호와, 화면을 리셋할 것인지의 여부를 bool 타입의 reset으로 받겠습니다.\r\n");
      out.write("        //(페이지가 그대로 머물면서 댓글이 밑에 계속 쌓이기 때문에, 상황에 따라서\r\n");
      out.write("        // 페이지를 리셋해서 새롭게 그려낼 것인지, 누적해서 쌓을 것인지의 여부를 판단.)\r\n");
      out.write("        function getList(reset) {\r\n");
      out.write("            strAdd = '';\r\n");
      out.write("            const bno = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${article.bno}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'; //게시글 번호\r\n");
      out.write("\r\n");
      out.write("            //get방식으로 댓글 목록을 요청(비동기)\r\n");
      out.write("            fetch('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/reply/getList/' + bno)\r\n");
      out.write("                .then(res => res.json())\r\n");
      out.write("                .then(data => {\r\n");
      out.write("                    console.log(data);\r\n");
      out.write("\r\n");
      out.write("                    let total = data.total; //총 댓글 수\r\n");
      out.write("                    let replyList = data.list; //댓글 리스트\r\n");
      out.write("\r\n");
      out.write("                    //insert, update, delete 작업 후에는\r\n");
      out.write("                    //댓글 내용 태그를 누적하고 있는 strAdd 변수를 초기화해서\r\n");
      out.write("                    //마치 화면이 리셋된 것처럼 보여줘야 합니다.\r\n");
      out.write("                    if (reset) {\r\n");
      out.write("                        while ($replyList.firstChild) {\r\n");
      out.write("                            $replyList.firstChild.remove();\r\n");
      out.write("                        }\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                    //응답 데이터의 길이가 0과 같거나 더 작으면 함수를 종료.\r\n");
      out.write("                    if (replyList.length <= 0) return;\r\n");
      out.write("\r\n");
      out.write("                    //replyList의 개수만큼 태그를 문자열 형태로 직접 그림.\r\n");
      out.write("                    //중간에 들어갈 글쓴이, 날짜, 댓글 내용은 목록에서 꺼내서 표현.\r\n");
      out.write("                    for (let i = 0; i < replyList.length; i++) {\r\n");
      out.write("                        strAdd += `\r\n");
      out.write("                        <div class='reply-wrap'>\r\n");
      out.write("                        <div class='reply-content'>\r\n");
      out.write("                            <div class='reply-group'>\r\n");
      out.write("                                <strong class='left'>` + replyList[i].replyId + ` </strong>\r\n");
      out.write("                                <a href='` + replyList[i].rno + `' class='right replyDelete'><span class='glyphicon glyphicon-remove'></span>삭제</a> &nbsp;\r\n");
      out.write("                                <a href='` + replyList[i].rno + `' class='right replyModify'><span class='glyphicon glyphicon-pencil'></span>수정</a>\r\n");
      out.write("                            </div>\r\n");
      out.write("                            <p class='clearfix'>` + replyList[i].reply + `</p>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </div>`;\r\n");
      out.write("\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                    //id가 replyList라는 div 영역에 문자열 형식으로 모든 댓글을 추가.\r\n");
      out.write("                    if (!reset) {\r\n");
      out.write("                        document.getElementById('replyList').insertAdjacentHTML('beforeend', strAdd);\r\n");
      out.write("                    } else {\r\n");
      out.write("                        document.getElementById('replyList').insertAdjacentHTML('afterbegin', strAdd);\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                });\r\n");
      out.write("        } // end getList();\r\n");
      out.write("\r\n");
      out.write("        //수정, 삭제\r\n");
      out.write("        document.getElementById('replyList').addEventListener('click', e => {\r\n");
      out.write("            e.preventDefault(); //태그의 고유 기능을 중지.\r\n");
      out.write("\r\n");
      out.write("            //1. 이벤트가 발생한 target이 a태그가 아니라면 이벤트 종료.\r\n");
      out.write("            if (!e.target.matches('a')) {\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            //2. a태그가 두 개(수정, 삭제)이므로 어떤 링크인지를 확인.\r\n");
      out.write("            //댓글이 여러 개 -> 수정, 삭제가 발생하는 댓글이 몇 번인지도 확인.\r\n");
      out.write("            const rno = e.target.getAttribute('href');\r\n");
      out.write("            console.log('댓글 번호: ' + rno);\r\n");
      out.write("            //모달 내부에 숨겨진 input 태그에 댓글 번호를 담아주자.\r\n");
      out.write("            document.getElementById('modalRno').value = rno;\r\n");
      out.write("\r\n");
      out.write("            const content = e.target.parentNode.nextElementSibling.textContent;\r\n");
      out.write("            console.log('댓글 내용: ' + content);\r\n");
      out.write("\r\n");
      out.write("            //3. 모달 창 하나를 이용해서 상황에 따라 수정 / 삭제 모달을 구분하기 위해\r\n");
      out.write("            //조건문을 작성. (모달 하나로 수정, 삭제를 같이 처리. 그러기 위해 디자인 조정.)\r\n");
      out.write("            if (e.target.classList.contains('replyModify')) {\r\n");
      out.write("                //수정 버튼을 눌렀으므로 수정 모달 형식을 꾸며주겠다.\r\n");
      out.write("                document.querySelector('.modal-title').textContent = '댓글 수정';\r\n");
      out.write("                document.getElementById('modalReply').style.display = 'inline'; //댓글창\r\n");
      out.write("                document.getElementById('modalReply').value = content;\r\n");
      out.write("                document.getElementById('modalModBtn').style.display = 'inline';\r\n");
      out.write("                document.getElementById('modalDelBtn').style.display = 'none';\r\n");
      out.write("\r\n");
      out.write("                //제이쿼리를 이용해서 bootstrap 모달을 여는 방법.\r\n");
      out.write("                $('#replyModal').modal('show');\r\n");
      out.write("\r\n");
      out.write("            } else {\r\n");
      out.write("                //삭제 버튼을 눌렀으므로 삭제 모달 형식으로 꾸며줌.\r\n");
      out.write("                document.querySelector('.modal-title').textContent = '댓글 삭제';\r\n");
      out.write("                document.getElementById('modalReply').style.display = 'none'; //댓글창\r\n");
      out.write("                document.getElementById('modalModBtn').style.display = 'none';\r\n");
      out.write("                document.getElementById('modalDelBtn').style.display = 'inline';\r\n");
      out.write("                $('#replyModal').modal('show');\r\n");
      out.write("            }\r\n");
      out.write("        }); //수정 or 삭제 버튼 클릭 이벤트 끝.\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        //수정 처리 함수. (수정 모달을 열어서 수정 내용을 작성 후 수정 버튼을 클릭했을 때)\r\n");
      out.write("        document.getElementById('modalModBtn').onclick = () => {\r\n");
      out.write("\r\n");
      out.write("            const reply = document.getElementById('modalReply').value;\r\n");
      out.write("            const rno = document.getElementById('modalRno').value;\r\n");
      out.write("            const replyPw = document.getElementById('modalPw').value;\r\n");
      out.write("\r\n");
      out.write("            if (reply === '' || replyPw === '') {\r\n");
      out.write("                alert('내용, 비밀번호를 확인하세요!');\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            //요청에 관련된 정보 객체\r\n");
      out.write("            const reqObj = {\r\n");
      out.write("                method: 'put',\r\n");
      out.write("                headers: {\r\n");
      out.write("                    'Content-Type': 'application/json'\r\n");
      out.write("                },\r\n");
      out.write("                body: JSON.stringify({\r\n");
      out.write("                    // 'rno':rno,\r\n");
      out.write("                    'reply': reply,\r\n");
      out.write("                    'replyPw': replyPw\r\n");
      out.write("                })\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            fetch('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/reply/' + rno, reqObj)\r\n");
      out.write("                .then(res => res.text())\r\n");
      out.write("                .then(data => {\r\n");
      out.write("                    if (data === 'pwFail') {\r\n");
      out.write("                        alert('비밀번호를 확인하세요.');\r\n");
      out.write("                        document.getElementById('modalPw').value = '';\r\n");
      out.write("                        document.getElementById('modalPw').focus();\r\n");
      out.write("                    } else {\r\n");
      out.write("                        alert('정상 수정 되었습니다.');\r\n");
      out.write("                        document.getElementById('modalReply').value = '';\r\n");
      out.write("                        document.getElementById('modalPw').value = '';\r\n");
      out.write("                        //제이쿼리 문법으로 bootstrap 모달 닫아주기\r\n");
      out.write("                        $('#replyModal').modal('hide');\r\n");
      out.write("                        getList(true);\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("        } //end update event\r\n");
      out.write("\r\n");
      out.write("        //삭제 이벤트\r\n");
      out.write("        document.getElementById('modalDelBtn').onclick = () => {\r\n");
      out.write("            /*\r\n");
      out.write("            1. 모달창에 rno값, replyPw 값을 얻습니다.\r\n");
      out.write("\r\n");
      out.write("            2. fetch 함수를 이용해서 DELETE 방식으로 reply/{rno} 요청\r\n");
      out.write("\r\n");
      out.write("            3. 서버에서는 요청을 받아서 비밀번호를 확인하고, 비밀번호가 맞으면\r\n");
      out.write("             삭제를 진행하시면 됩니다.\r\n");
      out.write("\r\n");
      out.write("            4. 만약 비밀번호가 틀렸다면, 문자열을 반환해서\r\n");
      out.write("            '비밀번호가 틀렸습니다.' 경고창을 띄우세요.\r\n");
      out.write("\r\n");
      out.write("            삭제 완료되면 모달 닫고 목록 요청 다시 보내세요. (reset의 여부를 잘 판단)\r\n");
      out.write("            */\r\n");
      out.write("\r\n");
      out.write("            const rno = document.getElementById('modalRno').value;\r\n");
      out.write("            const replyPw = document.getElementById('modalPw').value;\r\n");
      out.write("\r\n");
      out.write("            if (replyPw === '') {\r\n");
      out.write("                alert('비밀번호를 확인하세요!');\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            fetch('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/reply/' + rno, {\r\n");
      out.write("                    method: 'delete',\r\n");
      out.write("                    headers: {\r\n");
      out.write("                        'Content-Type': 'application/json'\r\n");
      out.write("                    },\r\n");
      out.write("                    body: JSON.stringify({\r\n");
      out.write("                        'replyPw': replyPw\r\n");
      out.write("                    })\r\n");
      out.write("                })\r\n");
      out.write("                .then(res => res.text())\r\n");
      out.write("                .then(data => {\r\n");
      out.write("                    if (data === 'delSuccess') {\r\n");
      out.write("                        alert('댓글이 삭제되었습니다.');\r\n");
      out.write("                        document.getElementById('modalPw').value = '';\r\n");
      out.write("                        $('#replyModal').modal('hide');\r\n");
      out.write("                        getList(true);\r\n");
      out.write("                    } else {\r\n");
      out.write("                        alert('비밀번호가 틀렸습니다.');\r\n");
      out.write("                        document.getElementById('modalPw').value = '';\r\n");
      out.write("                        document.getElementById('modalPw').focus();\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("\r\n");
      out.write("        } //end delete event\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_fmt_005fparseDate_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:parseDate
    org.apache.taglibs.standard.tag.rt.fmt.ParseDateTag _jspx_th_fmt_005fparseDate_005f0 = (org.apache.taglibs.standard.tag.rt.fmt.ParseDateTag) _005fjspx_005ftagPool_005ffmt_005fparseDate_0026_005fvar_005fvalue_005ftype_005fpattern_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.ParseDateTag.class);
    boolean _jspx_th_fmt_005fparseDate_005f0_reused = false;
    try {
      _jspx_th_fmt_005fparseDate_005f0.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fparseDate_005f0.setParent(null);
      // /WEB-INF/views/freeboard/freeDetail.jsp(23,31) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fparseDate_005f0.setValue((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${article.regDate}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      // /WEB-INF/views/freeboard/freeDetail.jsp(23,31) name = pattern type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fparseDate_005f0.setPattern("yyyy-MM-dd'T'HH:mm:ss");
      // /WEB-INF/views/freeboard/freeDetail.jsp(23,31) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fparseDate_005f0.setVar("parsedDateTime");
      // /WEB-INF/views/freeboard/freeDetail.jsp(23,31) name = type type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fparseDate_005f0.setType("both");
      int _jspx_eval_fmt_005fparseDate_005f0 = _jspx_th_fmt_005fparseDate_005f0.doStartTag();
      if (_jspx_th_fmt_005fparseDate_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fparseDate_0026_005fvar_005fvalue_005ftype_005fpattern_005fnobody.reuse(_jspx_th_fmt_005fparseDate_005f0);
      _jspx_th_fmt_005fparseDate_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fparseDate_005f0, _jsp_getInstanceManager(), _jspx_th_fmt_005fparseDate_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fformatDate_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:formatDate
    org.apache.taglibs.standard.tag.rt.fmt.FormatDateTag _jspx_th_fmt_005fformatDate_005f0 = (org.apache.taglibs.standard.tag.rt.fmt.FormatDateTag) _005fjspx_005ftagPool_005ffmt_005fformatDate_0026_005fvalue_005fpattern_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.FormatDateTag.class);
    boolean _jspx_th_fmt_005fformatDate_005f0_reused = false;
    try {
      _jspx_th_fmt_005fformatDate_005f0.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fformatDate_005f0.setParent(null);
      // /WEB-INF/views/freeboard/freeDetail.jsp(25,31) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fformatDate_005f0.setValue((java.util.Date) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${parsedDateTime}", java.util.Date.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      // /WEB-INF/views/freeboard/freeDetail.jsp(25,31) name = pattern type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fformatDate_005f0.setPattern("yyyy년 MM월 dd일");
      int _jspx_eval_fmt_005fformatDate_005f0 = _jspx_th_fmt_005fformatDate_005f0.doStartTag();
      if (_jspx_th_fmt_005fformatDate_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fformatDate_0026_005fvalue_005fpattern_005fnobody.reuse(_jspx_th_fmt_005fformatDate_005f0);
      _jspx_th_fmt_005fformatDate_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fformatDate_005f0, _jsp_getInstanceManager(), _jspx_th_fmt_005fformatDate_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f0_reused = false;
    try {
      _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f0.setParent(null);
      // /WEB-INF/views/freeboard/freeDetail.jsp(35,108) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f0.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${article.writer}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
      if (_jspx_th_c_005fout_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
      _jspx_th_c_005fout_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f1 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f1_reused = false;
    try {
      _jspx_th_c_005fout_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f1.setParent(null);
      // /WEB-INF/views/freeboard/freeDetail.jsp(41,132) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f1.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${article.title}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_c_005fout_005f1 = _jspx_th_c_005fout_005f1.doStartTag();
      if (_jspx_th_c_005fout_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f1);
      _jspx_th_c_005fout_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f2 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f2_reused = false;
    try {
      _jspx_th_c_005fout_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f2.setParent(null);
      // /WEB-INF/views/freeboard/freeDetail.jsp(46,102) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f2.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${article.content}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_c_005fout_005f2 = _jspx_th_c_005fout_005f2.doStartTag();
      if (_jspx_th_c_005fout_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f2);
      _jspx_th_c_005fout_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f2_reused);
    }
    return false;
  }
}
